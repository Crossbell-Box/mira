/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AbiInterface extends utils.Interface {
  functions: {
    "addValidators(address[])": FunctionFragment;
    "changeRequiredNumber(uint256)": FunctionFragment;
    "checkThreshold(uint256)": FunctionFragment;
    "getRequiredNumber()": FunctionFragment;
    "getValidators()": FunctionFragment;
    "isValidator(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "removeValidators(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addValidators"
      | "changeRequiredNumber"
      | "checkThreshold"
      | "getRequiredNumber"
      | "getValidators"
      | "isValidator"
      | "owner"
      | "removeValidators"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addValidators",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeRequiredNumber",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRequiredNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidators",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isValidator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeValidators",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeRequiredNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRequiredNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeValidators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "RequirementChanged(uint256,uint256)": EventFragment;
    "ValidatorAdded(address)": EventFragment;
    "ValidatorRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequirementChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorRemoved"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RequirementChangedEventObject {
  requirement: BigNumber;
  previousRequired: BigNumber;
}
export type RequirementChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  RequirementChangedEventObject
>;

export type RequirementChangedEventFilter =
  TypedEventFilter<RequirementChangedEvent>;

export interface ValidatorAddedEventObject {
  validator: string;
}
export type ValidatorAddedEvent = TypedEvent<
  [string],
  ValidatorAddedEventObject
>;

export type ValidatorAddedEventFilter = TypedEventFilter<ValidatorAddedEvent>;

export interface ValidatorRemovedEventObject {
  validator: string;
}
export type ValidatorRemovedEvent = TypedEvent<
  [string],
  ValidatorRemovedEventObject
>;

export type ValidatorRemovedEventFilter =
  TypedEventFilter<ValidatorRemovedEvent>;

export interface Abi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addValidators(
      validators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeRequiredNumber(
      newRequiredNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkThreshold(
      voteCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getRequiredNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    getValidators(
      overrides?: CallOverrides
    ): Promise<[string[]] & { validators: string[] }>;

    isValidator(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    removeValidators(
      validators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addValidators(
    validators: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeRequiredNumber(
    newRequiredNumber: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkThreshold(
    voteCount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getRequiredNumber(overrides?: CallOverrides): Promise<BigNumber>;

  getValidators(overrides?: CallOverrides): Promise<string[]>;

  isValidator(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  removeValidators(
    validators: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addValidators(
      validators: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    changeRequiredNumber(
      newRequiredNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkThreshold(
      voteCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getRequiredNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getValidators(overrides?: CallOverrides): Promise<string[]>;

    isValidator(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    removeValidators(
      validators: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RequirementChanged(uint256,uint256)"(
      requirement?: PromiseOrValue<BigNumberish> | null,
      previousRequired?: PromiseOrValue<BigNumberish> | null
    ): RequirementChangedEventFilter;
    RequirementChanged(
      requirement?: PromiseOrValue<BigNumberish> | null,
      previousRequired?: PromiseOrValue<BigNumberish> | null
    ): RequirementChangedEventFilter;

    "ValidatorAdded(address)"(
      validator?: PromiseOrValue<string> | null
    ): ValidatorAddedEventFilter;
    ValidatorAdded(
      validator?: PromiseOrValue<string> | null
    ): ValidatorAddedEventFilter;

    "ValidatorRemoved(address)"(
      validator?: PromiseOrValue<string> | null
    ): ValidatorRemovedEventFilter;
    ValidatorRemoved(
      validator?: PromiseOrValue<string> | null
    ): ValidatorRemovedEventFilter;
  };

  estimateGas: {
    addValidators(
      validators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeRequiredNumber(
      newRequiredNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkThreshold(
      voteCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRequiredNumber(overrides?: CallOverrides): Promise<BigNumber>;

    getValidators(overrides?: CallOverrides): Promise<BigNumber>;

    isValidator(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    removeValidators(
      validators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addValidators(
      validators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeRequiredNumber(
      newRequiredNumber: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkThreshold(
      voteCount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRequiredNumber(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValidators(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isValidator(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeValidators(
      validators: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
