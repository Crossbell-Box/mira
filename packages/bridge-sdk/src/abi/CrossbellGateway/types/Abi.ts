/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace DataTypes {
  export type DepositEntryStruct = {
    chainId: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type DepositEntryStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber
  ] & {
    chainId: BigNumber;
    recipient: string;
    token: string;
    amount: BigNumber;
  };

  export type MappedTokenStruct = {
    token: PromiseOrValue<string>;
    decimals: PromiseOrValue<BigNumberish>;
  };

  export type MappedTokenStructOutput = [string, number] & {
    token: string;
    decimals: number;
  };

  export type WithdrawalEntryStruct = {
    chainId: PromiseOrValue<BigNumberish>;
    recipient: PromiseOrValue<string>;
    token: PromiseOrValue<string>;
    amount: PromiseOrValue<BigNumberish>;
    fee: PromiseOrValue<BigNumberish>;
  };

  export type WithdrawalEntryStructOutput = [
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    chainId: BigNumber;
    recipient: string;
    token: string;
    amount: BigNumber;
    fee: BigNumber;
  };
}

export interface AbiInterface extends utils.Interface {
  functions: {
    "ADMIN_ROLE()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "ackDeposit(uint256,uint256,address,address,uint256,bytes32)": FunctionFragment;
    "batchAckDeposit(uint256[],uint256[],address[],address[],uint256[],bytes32[])": FunctionFragment;
    "batchSubmitWithdrawalSignatures(uint256[],uint256[],bytes[])": FunctionFragment;
    "getAcknowledgementCount(uint256,uint256,bytes32)": FunctionFragment;
    "getAcknowledgementStatus(uint256,uint256,bytes32)": FunctionFragment;
    "getDepositEntry(uint256,uint256)": FunctionFragment;
    "getMainchainToken(uint256,address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getValidatorAcknowledgementHash(uint256,uint256,address)": FunctionFragment;
    "getValidatorContract()": FunctionFragment;
    "getWithdrawalCount(uint256)": FunctionFragment;
    "getWithdrawalEntry(uint256,uint256)": FunctionFragment;
    "getWithdrawalSignatures(uint256,uint256)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address[],uint256[],address[],uint8[])": FunctionFragment;
    "mapTokens(address[],uint256[],address[],uint8[])": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "requestWithdrawal(uint256,address,address,uint256,uint256)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "submitWithdrawalSignature(uint256,uint256,bytes)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "ackDeposit"
      | "batchAckDeposit"
      | "batchSubmitWithdrawalSignatures"
      | "getAcknowledgementCount"
      | "getAcknowledgementStatus"
      | "getDepositEntry"
      | "getMainchainToken"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "getValidatorAcknowledgementHash"
      | "getValidatorContract"
      | "getWithdrawalCount"
      | "getWithdrawalEntry"
      | "getWithdrawalSignatures"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "mapTokens"
      | "pause"
      | "paused"
      | "renounceRole"
      | "requestWithdrawal"
      | "revokeRole"
      | "submitWithdrawalSignature"
      | "supportsInterface"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ackDeposit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchAckDeposit",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "batchSubmitWithdrawalSignatures",
    values: [
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAcknowledgementCount",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAcknowledgementStatus",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositEntry",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMainchainToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorAcknowledgementHash",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalEntry",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawalSignatures",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mapTokens",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "requestWithdrawal",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitWithdrawalSignature",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ackDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchAckDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSubmitWithdrawalSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAcknowledgementCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAcknowledgementStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMainchainToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorAcknowledgementHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalEntry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawalSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mapTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitWithdrawalSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "AckDeposit(uint256,uint256,address,address,address,uint256)": EventFragment;
    "Deposited(uint256,uint256,address,address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "RequestWithdrawal(uint256,uint256,address,address,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SubmitWithdrawalSignature(uint256,uint256,address,bytes)": EventFragment;
    "TokenMapped(address[],uint256[],address[],uint8[])": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AckDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestWithdrawal"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubmitWithdrawalSignature"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenMapped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AckDepositEventObject {
  chainId: BigNumber;
  depositId: BigNumber;
  validator: string;
  recipient: string;
  token: string;
  amount: BigNumber;
}
export type AckDepositEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, string, BigNumber],
  AckDepositEventObject
>;

export type AckDepositEventFilter = TypedEventFilter<AckDepositEvent>;

export interface DepositedEventObject {
  chainId: BigNumber;
  depositId: BigNumber;
  recipient: string;
  token: string;
  amount: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RequestWithdrawalEventObject {
  chainId: BigNumber;
  withdrawalId: BigNumber;
  recipient: string;
  token: string;
  amount: BigNumber;
  fee: BigNumber;
}
export type RequestWithdrawalEvent = TypedEvent<
  [BigNumber, BigNumber, string, string, BigNumber, BigNumber],
  RequestWithdrawalEventObject
>;

export type RequestWithdrawalEventFilter =
  TypedEventFilter<RequestWithdrawalEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SubmitWithdrawalSignatureEventObject {
  chainId: BigNumber;
  withdrawalId: BigNumber;
  validator: string;
  signature: string;
}
export type SubmitWithdrawalSignatureEvent = TypedEvent<
  [BigNumber, BigNumber, string, string],
  SubmitWithdrawalSignatureEventObject
>;

export type SubmitWithdrawalSignatureEventFilter =
  TypedEventFilter<SubmitWithdrawalSignatureEvent>;

export interface TokenMappedEventObject {
  crossbellTokens: string[];
  chainIds: BigNumber[];
  mainchainTokens: string[];
  mainchainTokenDecimals: number[];
}
export type TokenMappedEvent = TypedEvent<
  [string[], BigNumber[], string[], number[]],
  TokenMappedEventObject
>;

export type TokenMappedEventFilter = TypedEventFilter<TokenMappedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Abi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    ackDeposit(
      chainId: PromiseOrValue<BigNumberish>,
      depositId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      depositHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchAckDeposit(
      chainIds: PromiseOrValue<BigNumberish>[],
      depositIds: PromiseOrValue<BigNumberish>[],
      recipients: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      depositHashes: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    batchSubmitWithdrawalSignatures(
      chainIds: PromiseOrValue<BigNumberish>[],
      withdrawalIds: PromiseOrValue<BigNumberish>[],
      sigs: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAcknowledgementCount(
      chainId: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAcknowledgementStatus(
      chainId: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getDepositEntry(
      chainId: PromiseOrValue<BigNumberish>,
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.DepositEntryStructOutput]>;

    getMainchainToken(
      chainId: PromiseOrValue<BigNumberish>,
      crossbellToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [DataTypes.MappedTokenStructOutput] & {
        token: DataTypes.MappedTokenStructOutput;
      }
    >;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getValidatorAcknowledgementHash(
      chainId: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getValidatorContract(overrides?: CallOverrides): Promise<[string]>;

    getWithdrawalCount(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getWithdrawalEntry(
      chainId: PromiseOrValue<BigNumberish>,
      withdrawalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.WithdrawalEntryStructOutput]>;

    getWithdrawalSignatures(
      chainId: PromiseOrValue<BigNumberish>,
      withdrawalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { signers: string[]; sigs: string[] }>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      validator: PromiseOrValue<string>,
      admin: PromiseOrValue<string>,
      crossbellTokens: PromiseOrValue<string>[],
      chainIds: PromiseOrValue<BigNumberish>[],
      mainchainTokens: PromiseOrValue<string>[],
      mainchainTokenDecimals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    mapTokens(
      crossbellTokens: PromiseOrValue<string>[],
      chainIds: PromiseOrValue<BigNumberish>[],
      mainchainTokens: PromiseOrValue<string>[],
      mainchainTokenDecimals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestWithdrawal(
      chainId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitWithdrawalSignature(
      chainId: PromiseOrValue<BigNumberish>,
      withdrawalId: PromiseOrValue<BigNumberish>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  ackDeposit(
    chainId: PromiseOrValue<BigNumberish>,
    depositId: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    depositHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchAckDeposit(
    chainIds: PromiseOrValue<BigNumberish>[],
    depositIds: PromiseOrValue<BigNumberish>[],
    recipients: PromiseOrValue<string>[],
    tokens: PromiseOrValue<string>[],
    amounts: PromiseOrValue<BigNumberish>[],
    depositHashes: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  batchSubmitWithdrawalSignatures(
    chainIds: PromiseOrValue<BigNumberish>[],
    withdrawalIds: PromiseOrValue<BigNumberish>[],
    sigs: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAcknowledgementCount(
    chainId: PromiseOrValue<BigNumberish>,
    id: PromiseOrValue<BigNumberish>,
    hash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAcknowledgementStatus(
    chainId: PromiseOrValue<BigNumberish>,
    id: PromiseOrValue<BigNumberish>,
    hash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  getDepositEntry(
    chainId: PromiseOrValue<BigNumberish>,
    depositId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.DepositEntryStructOutput>;

  getMainchainToken(
    chainId: PromiseOrValue<BigNumberish>,
    crossbellToken: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<DataTypes.MappedTokenStructOutput>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getValidatorAcknowledgementHash(
    chainId: PromiseOrValue<BigNumberish>,
    id: PromiseOrValue<BigNumberish>,
    validator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getValidatorContract(overrides?: CallOverrides): Promise<string>;

  getWithdrawalCount(
    chainId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getWithdrawalEntry(
    chainId: PromiseOrValue<BigNumberish>,
    withdrawalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.WithdrawalEntryStructOutput>;

  getWithdrawalSignatures(
    chainId: PromiseOrValue<BigNumberish>,
    withdrawalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[string[], string[]] & { signers: string[]; sigs: string[] }>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    validator: PromiseOrValue<string>,
    admin: PromiseOrValue<string>,
    crossbellTokens: PromiseOrValue<string>[],
    chainIds: PromiseOrValue<BigNumberish>[],
    mainchainTokens: PromiseOrValue<string>[],
    mainchainTokenDecimals: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  mapTokens(
    crossbellTokens: PromiseOrValue<string>[],
    chainIds: PromiseOrValue<BigNumberish>[],
    mainchainTokens: PromiseOrValue<string>[],
    mainchainTokenDecimals: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestWithdrawal(
    chainId: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitWithdrawalSignature(
    chainId: PromiseOrValue<BigNumberish>,
    withdrawalId: PromiseOrValue<BigNumberish>,
    sig: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    ackDeposit(
      chainId: PromiseOrValue<BigNumberish>,
      depositId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      depositHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    batchAckDeposit(
      chainIds: PromiseOrValue<BigNumberish>[],
      depositIds: PromiseOrValue<BigNumberish>[],
      recipients: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      depositHashes: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    batchSubmitWithdrawalSignatures(
      chainIds: PromiseOrValue<BigNumberish>[],
      withdrawalIds: PromiseOrValue<BigNumberish>[],
      sigs: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    getAcknowledgementCount(
      chainId: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAcknowledgementStatus(
      chainId: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    getDepositEntry(
      chainId: PromiseOrValue<BigNumberish>,
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.DepositEntryStructOutput>;

    getMainchainToken(
      chainId: PromiseOrValue<BigNumberish>,
      crossbellToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<DataTypes.MappedTokenStructOutput>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorAcknowledgementHash(
      chainId: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getValidatorContract(overrides?: CallOverrides): Promise<string>;

    getWithdrawalCount(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalEntry(
      chainId: PromiseOrValue<BigNumberish>,
      withdrawalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.WithdrawalEntryStructOutput>;

    getWithdrawalSignatures(
      chainId: PromiseOrValue<BigNumberish>,
      withdrawalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string[], string[]] & { signers: string[]; sigs: string[] }>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      validator: PromiseOrValue<string>,
      admin: PromiseOrValue<string>,
      crossbellTokens: PromiseOrValue<string>[],
      chainIds: PromiseOrValue<BigNumberish>[],
      mainchainTokens: PromiseOrValue<string>[],
      mainchainTokenDecimals: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    mapTokens(
      crossbellTokens: PromiseOrValue<string>[],
      chainIds: PromiseOrValue<BigNumberish>[],
      mainchainTokens: PromiseOrValue<string>[],
      mainchainTokenDecimals: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    requestWithdrawal(
      chainId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitWithdrawalSignature(
      chainId: PromiseOrValue<BigNumberish>,
      withdrawalId: PromiseOrValue<BigNumberish>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AckDeposit(uint256,uint256,address,address,address,uint256)"(
      chainId?: PromiseOrValue<BigNumberish> | null,
      depositId?: PromiseOrValue<BigNumberish> | null,
      validator?: PromiseOrValue<string> | null,
      recipient?: null,
      token?: null,
      amount?: null
    ): AckDepositEventFilter;
    AckDeposit(
      chainId?: PromiseOrValue<BigNumberish> | null,
      depositId?: PromiseOrValue<BigNumberish> | null,
      validator?: PromiseOrValue<string> | null,
      recipient?: null,
      token?: null,
      amount?: null
    ): AckDepositEventFilter;

    "Deposited(uint256,uint256,address,address,uint256)"(
      chainId?: PromiseOrValue<BigNumberish> | null,
      depositId?: PromiseOrValue<BigNumberish> | null,
      recipient?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null
    ): DepositedEventFilter;
    Deposited(
      chainId?: PromiseOrValue<BigNumberish> | null,
      depositId?: PromiseOrValue<BigNumberish> | null,
      recipient?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null
    ): DepositedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RequestWithdrawal(uint256,uint256,address,address,uint256,uint256)"(
      chainId?: PromiseOrValue<BigNumberish> | null,
      withdrawalId?: PromiseOrValue<BigNumberish> | null,
      recipient?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null,
      fee?: null
    ): RequestWithdrawalEventFilter;
    RequestWithdrawal(
      chainId?: PromiseOrValue<BigNumberish> | null,
      withdrawalId?: PromiseOrValue<BigNumberish> | null,
      recipient?: PromiseOrValue<string> | null,
      token?: null,
      amount?: null,
      fee?: null
    ): RequestWithdrawalEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SubmitWithdrawalSignature(uint256,uint256,address,bytes)"(
      chainId?: PromiseOrValue<BigNumberish> | null,
      withdrawalId?: PromiseOrValue<BigNumberish> | null,
      validator?: PromiseOrValue<string> | null,
      signature?: null
    ): SubmitWithdrawalSignatureEventFilter;
    SubmitWithdrawalSignature(
      chainId?: PromiseOrValue<BigNumberish> | null,
      withdrawalId?: PromiseOrValue<BigNumberish> | null,
      validator?: PromiseOrValue<string> | null,
      signature?: null
    ): SubmitWithdrawalSignatureEventFilter;

    "TokenMapped(address[],uint256[],address[],uint8[])"(
      crossbellTokens?: null,
      chainIds?: null,
      mainchainTokens?: null,
      mainchainTokenDecimals?: null
    ): TokenMappedEventFilter;
    TokenMapped(
      crossbellTokens?: null,
      chainIds?: null,
      mainchainTokens?: null,
      mainchainTokenDecimals?: null
    ): TokenMappedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    ackDeposit(
      chainId: PromiseOrValue<BigNumberish>,
      depositId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      depositHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchAckDeposit(
      chainIds: PromiseOrValue<BigNumberish>[],
      depositIds: PromiseOrValue<BigNumberish>[],
      recipients: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      depositHashes: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    batchSubmitWithdrawalSignatures(
      chainIds: PromiseOrValue<BigNumberish>[],
      withdrawalIds: PromiseOrValue<BigNumberish>[],
      sigs: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAcknowledgementCount(
      chainId: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAcknowledgementStatus(
      chainId: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositEntry(
      chainId: PromiseOrValue<BigNumberish>,
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMainchainToken(
      chainId: PromiseOrValue<BigNumberish>,
      crossbellToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorAcknowledgementHash(
      chainId: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValidatorContract(overrides?: CallOverrides): Promise<BigNumber>;

    getWithdrawalCount(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalEntry(
      chainId: PromiseOrValue<BigNumberish>,
      withdrawalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWithdrawalSignatures(
      chainId: PromiseOrValue<BigNumberish>,
      withdrawalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      validator: PromiseOrValue<string>,
      admin: PromiseOrValue<string>,
      crossbellTokens: PromiseOrValue<string>[],
      chainIds: PromiseOrValue<BigNumberish>[],
      mainchainTokens: PromiseOrValue<string>[],
      mainchainTokenDecimals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    mapTokens(
      crossbellTokens: PromiseOrValue<string>[],
      chainIds: PromiseOrValue<BigNumberish>[],
      mainchainTokens: PromiseOrValue<string>[],
      mainchainTokenDecimals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestWithdrawal(
      chainId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitWithdrawalSignature(
      chainId: PromiseOrValue<BigNumberish>,
      withdrawalId: PromiseOrValue<BigNumberish>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ackDeposit(
      chainId: PromiseOrValue<BigNumberish>,
      depositId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      depositHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchAckDeposit(
      chainIds: PromiseOrValue<BigNumberish>[],
      depositIds: PromiseOrValue<BigNumberish>[],
      recipients: PromiseOrValue<string>[],
      tokens: PromiseOrValue<string>[],
      amounts: PromiseOrValue<BigNumberish>[],
      depositHashes: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    batchSubmitWithdrawalSignatures(
      chainIds: PromiseOrValue<BigNumberish>[],
      withdrawalIds: PromiseOrValue<BigNumberish>[],
      sigs: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAcknowledgementCount(
      chainId: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAcknowledgementStatus(
      chainId: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositEntry(
      chainId: PromiseOrValue<BigNumberish>,
      depositId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMainchainToken(
      chainId: PromiseOrValue<BigNumberish>,
      crossbellToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorAcknowledgementHash(
      chainId: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      validator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValidatorContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalCount(
      chainId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalEntry(
      chainId: PromiseOrValue<BigNumberish>,
      withdrawalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWithdrawalSignatures(
      chainId: PromiseOrValue<BigNumberish>,
      withdrawalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      validator: PromiseOrValue<string>,
      admin: PromiseOrValue<string>,
      crossbellTokens: PromiseOrValue<string>[],
      chainIds: PromiseOrValue<BigNumberish>[],
      mainchainTokens: PromiseOrValue<string>[],
      mainchainTokenDecimals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    mapTokens(
      crossbellTokens: PromiseOrValue<string>[],
      chainIds: PromiseOrValue<BigNumberish>[],
      mainchainTokens: PromiseOrValue<string>[],
      mainchainTokenDecimals: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestWithdrawal(
      chainId: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitWithdrawalSignature(
      chainId: PromiseOrValue<BigNumberish>,
      withdrawalId: PromiseOrValue<BigNumberish>,
      sig: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
